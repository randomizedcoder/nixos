#
# hostapd.nix
#

#
# NOT using service.hostapd, because it has limited configuration capabilities
# https://github.com/NixOS/nixpkgs/blob/master/nixos/modules/services/networking/hostapd.nix
#
# Using custom systemd services to run hostapd per interface
#
# systemctl status hostapd-wlp35s0
# systemctl status hostapd-wlp65s0
# systemctl status hostapd-wlp70s0
#
# nix pkgs source
# https://github.com/NixOS/nixpkgs/blob/master/pkgs/by-name/ho/hostapd/package.nix
# https://w1.fi/hostapd/
# https://github.com/latelee/hostapd
#
{ config, pkgs, lib, ... }:

let
  radios = {
    wlp35s0 = {
      channel = 6;
      hwMode = "g";
      mac = "8E:37:6C:2E:40:FA";
    };
    wlp65s0 = {
      channel = 100;
      hwMode = "a";
      mac = "F6:FB:A4:06:06:82";
    };
    wlp70s0 = {
      channel = 149;
      hwMode = "a";
      mac = "AA:72:0E:90:28:4A";
    };
  };

  # # üîê Secure unique R1KH keys per destination MAC
  # r1khSecrets = {
  #   "8E:37:6C:2E:40:FA" = "fdeadbeef00000000000000000000001";
  #   "F6:FB:A4:06:06:82" = "cafef00dbabe00000000000000000002";
  #   "AA:72:0E:90:28:4A" = "facefeedfeed00000000000000000003";
  # };

  # normalizeMac = mac: builtins.replaceStrings [":"]
  #   [""] (lib.strings.toLower mac);

  # safeNASID = mac: "ap-${normalizeMac mac}";

  # r0khLines = lib.concatStringsSep "\n" (
  #   lib.mapAttrsToList (_iface: cfg:
  #     let mac = normalizeMac cfg.mac;
  #     in "r0kh=${normalizeMac peer.mac},${safeNASID peer.mac},${r1khSecrets.${peer.mac}}"
  #   ) radios
  # );

  # mkHostapdConf = iface: cfg: let
  #   r1khLines = lib.concatStringsSep "\n" (
  #     lib.mapAttrsToList (_peerIface: peerCfg:
  #       if peerCfg.mac != cfg.mac then
  #         "r1kh=${normalizeMac peerCfg.mac},${r1khSecrets.${peerCfg.mac}}"
  #       else
  #         ""
  #     ) radios
  #   );
      #\${r0khLines}
      #\${r1khLines}

  in
    pkgs.writeText "hostapd-${iface}.conf" ''
      driver=nl80211
      ssid=myssid
      hw_mode=${cfg.hwMode}
      channel=${toString cfg.channel}
      ctrl_interface=/run/hostapd-${iface}
      ctrl_interface_group=0

      wpa=2
      wpa_key_mgmt=SAE
      rsn_pairwise=CCMP
      sae_require_mfp=1
      ieee80211w=2
      ieee80211n=1
      ieee80211ac=1
      ieee80211ax=1
      wmm_enabled=1

      # Fast BSS Transition with push mode
      #ieee80211r=1
      pmk_r1_push=1
      mobility_domain=4f57
      ft_over_ds=1
      ft_psk_generate_local=1
      nas_identifier=myssid-ap

      #r0khLines
      #r1khLines

      # WMM tuning
      wmm_ac_be_aifs=1
      wmm_ac_be_cwmin=4
      wmm_ac_be_cwmax=4
      wmm_ac_be_txop_limit=32
      wmm_ac_be_acm=0
    '';

  hostapdConfigs = lib.mapAttrs (iface: cfg: mkHostapdConf iface cfg) radios;

in {
  systemd.services = lib.mapAttrs' (iface: confPath: {
    name = "hostapd-${iface}";
    value = {
      description = "Hostapd on ${iface}";
      wantedBy = [ "multi-user.target" ];
      after = [ "network.target" ];
      serviceConfig = {
        ExecStart = "${pkgs.hostapd}/bin/hostapd -i ${iface} ${confPath}";
        Restart = "on-failure";
        RuntimeDirectory = "hostapd-${iface}";
      };
    };
  }) hostapdConfigs;
}


# end