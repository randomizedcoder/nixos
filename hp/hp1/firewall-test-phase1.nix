#
# https://gitlab.com/sidenio/nix/data_center/lax/dcops_combined/firewall-test-phase1.nix
#
# Phase 1 Setup Script Generator for Firewall Testing
# This generates a bash script that sets up network namespaces for testing
#

{ config, lib, pkgs, ... }:

let
  # Import network data from the dcops configuration
  networkData = import /home/das/Downloads/siden/nix/data_center/lax/dcops_combined/network-data.nix;

  # Helper function to extract IP address from CIDR notation
  extractIP = cidr: lib.head (lib.splitString "/" cidr);

  # Helper function to extract network prefix from CIDR notation
  extractPrefix = cidr: lib.last (lib.splitString "/" cidr);

  # Get bond0 VRRP IP for outside interface
  bond0VrrpIP = extractIP networkData.bondConfig.vrrp_ip;

  # Generate the setup script
  setupScript = pkgs.writeScriptBin "firewall-test-phase1-setup" ''
    #!/bin/bash
    #
    # Firewall Test Phase 1 Setup Script
    # Generated by Nix from firewall-test-phase1.nix
    #
    # This script sets up network namespaces for firewall testing
    #

    set -e

    echo "Starting Firewall Test Phase 1 Setup..."
    echo "======================================"

    # Array to track created namespaces
    declare -a namespaces=()

    # Test node network interface configuration
    OUTSIDE_NIC="enp4s0f0"
    INSIDE_NIC="enp4s0f1"

    # Test node IP addresses
    OUTSIDE_IP="160.72.7.66/27"  # Test node on outside network
    INSIDE_IP_SUFFIX=".50"        # Test node IP suffix for VLANs

    echo "Configuring outside interface..."
    echo "================================"

    # Setup outside interface (bond0)
    namespace="outside_host"
    namespaces+=("$namespace")

    echo "Creating namespace: net_$namespace"
    ip netns add net_"$namespace"

    echo "Moving $OUTSIDE_NIC to namespace net_$namespace"
    ip link set dev "$OUTSIDE_NIC" netns net_"$namespace"

    echo "Configuring IP address: $OUTSIDE_IP"
    ip netns exec net_"$namespace" ip address add $OUTSIDE_IP dev "$OUTSIDE_NIC"

    echo "Bringing up interface"
    ip netns exec net_"$namespace" ip link set dev "$OUTSIDE_NIC" up

    echo "Adding default route via bond0 VRRP IP: $bond0VrrpIP"
    ip netns exec net_"$namespace" ip route add default via $bond0VrrpIP

    echo "Testing connectivity to default gateway..."
    ip netns exec net_"$namespace" ping -c 3 -w 5 $bond0VrrpIP || echo "Warning: Ping to gateway failed"

    echo ""
    echo "Outside interface configuration:"
    ip netns exec net_"$namespace" ip link show
    echo ""
    ip netns exec net_"$namespace" ip addr show
    echo ""
    ip netns exec net_"$namespace" ip route show
    echo ""

    echo "Configuring VLAN interfaces..."
    echo "============================="

    ${lib.concatMapStringsSep "\n" (vlanName: vlanConfig: ''
    # Setup ${vlanName} interface
    namespace="${vlanName}"
    namespaces+=("$namespace")
    vlan_id="${toString vlanConfig.id}"
    vlan_dev="$INSIDE_NIC"

    echo "Creating namespace: net_$namespace"
    ip netns add net_"$namespace"

    echo "Creating VLAN interface: $vlan_dev.$vlan_id"
    ip link add link "$vlan_dev" name "$vlan_dev.$vlan_id" type vlan id "$vlan_id"

    echo "Moving VLAN interface to namespace net_$namespace"
    ip link set dev "$vlan_dev.$vlan_id" netns net_"$namespace"

    # Calculate test node IP for this VLAN
    vlan_vrrp_ip="${extractIP vlanConfig.vrrp_ip}"
    vlan_network="${lib.head (lib.splitString "/" vlanConfig.vrrp_ip)}"
    vlan_prefix="${lib.last (lib.splitString "/" vlanConfig.vrrp_ip)}"

    # Extract first 3 octets and add .50 suffix
    vlan_base_ip="${lib.head (lib.splitString "." vlan_network)}.${lib.elemAt (lib.splitString "." vlan_network) 1}.${lib.elemAt (lib.splitString "." vlan_network) 2}$INSIDE_IP_SUFFIX/$vlan_prefix"

    echo "Configuring IP address: $vlan_base_ip"
    ip netns exec net_"$namespace" ip address add $vlan_base_ip dev "$vlan_dev.$vlan_id"

    echo "Bringing up VLAN interface"
    ip netns exec net_"$namespace" ip link set dev "$vlan_dev.$vlan_id" up

    echo "Adding default route via VLAN VRRP IP: $vlan_vrrp_ip"
    ip netns exec net_"$namespace" ip route add default via $vlan_vrrp_ip

    echo "Testing connectivity to VLAN gateway..."
    ip netns exec net_"$namespace" ping -c 3 -w 5 $vlan_vrrp_ip || echo "Warning: Ping to VLAN gateway failed"

    echo ""
    echo "${vlanName} interface configuration:"
    ip netns exec net_"$namespace" ip link show
    echo ""
    ip netns exec net_"$namespace" ip addr show
    echo ""
    ip netns exec net_"$namespace" ip route show
    echo ""
    '') (lib.mapAttrsToList (name: value: { inherit name; value = value; }) networkData.vlanConfigs)}

    echo "Setup complete!"
    echo "==============="
    echo ""
    echo "Created network namespaces:"
    echo "==========================="
    find /run/netns/ -type l 2>/dev/null || echo "No network namespaces found"
    echo ""
    echo "Network namespace count: $(find /run/netns/ -type l 2>/dev/null | wc -l || echo 0)"
    echo ""

    echo "Routing summary for all namespaces:"
    echo "==================================="
    for ns in "''${namespaces[@]}"; do
        echo ""
        echo "--- net_$ns ---"
        ip netns exec net_"$ns" ip route show || echo "Failed to show routes for net_$ns"
    done

    echo ""
    echo "Phase 1 setup complete. Ready for Phase 2 (allow all) testing."
    echo ""
    echo "To clean up all namespaces, run:"
    echo "for ns in \"''${namespaces[@]}\"; do ip netns delete net_\$ns; done"
    echo ""
  '';

in {
  # Create the setup script
  environment.systemPackages = [ setupScript ];

  # Make the script executable
  system.activationScripts.firewall-test-setup = ''
    chmod +x ${setupScript}/bin/firewall-test-phase1-setup
  '';
}